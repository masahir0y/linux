# SPDX-License-Identifier: GPL-2.0
# ==========================================================================
# Installing headers
#
# All headers under include/uapi, include/generated/uapi,
# arch/<arch>/include/uapi and arch/<arch>/include/generated/uapi are
# exported.
# They are preprocessed to remove __KERNEL__ section of the file.
#
# ==========================================================================

PHONY := __headers
__headers:

include scripts/Kbuild.include

srcdir        := $(srctree)/$(obj)
gendir        := $(objtree)/$(subst include/,include/generated/,$(obj))

kbuild-files := $(shell find $(srcdir) -name Kbuild)
header-files := $(patsubst $(srcdir)/%,%,$(shell find $(srcdir) -name '*.h' -o -name '*.agh'))
genhdr-files := $(patsubst $(gendir)/%,%,$(shell find $(gendir) -name '*.h'))

no-export-all :=
mandatory-all :=

define parse-kbuild-file
no-export-headers :=
mandatory-y :=
include $(1)
no-export-all += $$(addprefix $(dir $(1)),$$(no-export-headers))
mandatory-all += $$(addprefix $(dir $(1)),$$(mandatory-y))
endef

$(foreach k, $(kbuild-files), $(eval $(call parse-kbuild-file,$(k))))

# files used to track state of install/check
installdir    := $(INSTALL_HDR_PATH)/$(dst)
install-file  := $(installdir)/.install
check-file    := $(installdir)/.check

all-files     := $(header-files) $(genhdr-files)
all-dirs      := $(dir $(header-files) $(genhdr-files))
output-files  := $(addprefix $(installdir)/, $(all-files))

ifneq ($(mandatory-all),)
missing       := $(filter-out $(all-files),$(mandatory-all))
ifneq ($(missing),)
$(error Some mandatory headers ($(missing)) are missing in $(obj))
endif
endif

# Work out what needs to be removed
oldheaders    := $(patsubst $(installdir)/%,%,$(wildcard $(installdir)/*.h))
unwanted      := $(filter-out $(all-files),$(oldheaders))

# Prefix unwanted with full paths to $(INSTALL_HDR_PATH)
unwanted-file := $(addprefix $(installdir)/, $(unwanted))

printdir = $(patsubst $(INSTALL_HDR_PATH)/%/,%,$(dir $@))

quiet_cmd_install = INSTALL $(printdir) ($(words $(all-files))\
                            file$(if $(word 2, $(all-files)),s))
      cmd_install = \
        $(CONFIG_SHELL) $< $(installdir) $(srcdir) $(header-files); \
        $(CONFIG_SHELL) $< $(installdir) $(gendir) $(genhdr-files); \
        touch $@

quiet_cmd_remove = REMOVE  $(unwanted)
      cmd_remove = rm -f $(unwanted-file)

quiet_cmd_check = CHECK   $(printdir) ($(words $(all-files)) files)
# Headers list can be pretty long, xargs helps to avoid
# the "Argument list too long" error.
      cmd_check = for f in $(all-files); do                          \
                  echo "$(installdir)/$${f}"; done                      \
                  | xargs                                            \
                  $(PERL) $< $(INSTALL_HDR_PATH)/include $(SRCARCH); \
	          touch $@

ifndef HDRCHECK
# Rules for installing headers
__headers: $(install-file)
	@:

targets += $(install-file)
$(install-file): scripts/headers_install.sh \
		 $(addprefix $(srcdir)/,$(header-files)) \
		 $(addprefix $(gendir)/,$(genhdr-files)) FORCE
	$(if $(unwanted),$(call cmd,remove),)
	$(if $(wildcard $(dir $@)),,$(shell mkdir -p $(dir $@)))
	$(call if_changed,install)

else
__headers: $(check-file)
	@:

targets += $(check-file)
$(check-file): scripts/headers_check.pl $(output-files) FORCE
	$(call if_changed,check)

endif

cmd_files := $(wildcard \
             $(foreach f,$(sort $(targets)),$(dir $(f)).$(notdir $(f)).cmd))

ifneq ($(cmd_files),)
	include $(cmd_files)
endif

PHONY += FORCE
FORCE: ;

.PHONY: $(PHONY)
